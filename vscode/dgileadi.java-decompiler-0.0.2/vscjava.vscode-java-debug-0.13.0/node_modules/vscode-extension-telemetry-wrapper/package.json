{
  "_args": [
    [
      {
        "raw": "vscode-extension-telemetry-wrapper@^0.3.1",
        "scope": null,
        "escapedName": "vscode-extension-telemetry-wrapper",
        "name": "vscode-extension-telemetry-wrapper",
        "rawSpec": "^0.3.1",
        "spec": ">=0.3.1 <0.4.0",
        "type": "range"
      },
      "C:\\jenkins\\workspace\\vscode-java-debug\\vscode-java-debug.vsix-withSign\\vscode-java-debug"
    ]
  ],
  "_from": "vscode-extension-telemetry-wrapper@>=0.3.1 <0.4.0",
  "_hasShrinkwrap": false,
  "_id": "vscode-extension-telemetry-wrapper@0.3.1",
  "_inCache": true,
  "_location": "/vscode-extension-telemetry-wrapper",
  "_nodeVersion": "8.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/vscode-extension-telemetry-wrapper_0.3.1_1536743620470_0.7467016515328306"
  },
  "_npmUser": {
    "name": "eskibear",
    "email": "zy1992@gmail.com"
  },
  "_npmVersion": "6.0.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vscode-extension-telemetry-wrapper@^0.3.1",
    "scope": null,
    "escapedName": "vscode-extension-telemetry-wrapper",
    "name": "vscode-extension-telemetry-wrapper",
    "rawSpec": "^0.3.1",
    "spec": ">=0.3.1 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vscode-extension-telemetry-wrapper/-/vscode-extension-telemetry-wrapper-0.3.1.tgz",
  "_shasum": "7eb14b68b2c4beff811636a95bca218c7fdfe18b",
  "_shrinkwrap": null,
  "_spec": "vscode-extension-telemetry-wrapper@^0.3.1",
  "_where": "C:\\jenkins\\workspace\\vscode-java-debug\\vscode-java-debug.vsix-withSign\\vscode-java-debug",
  "author": {
    "name": "eskibear"
  },
  "bugs": {
    "url": "https://github.com/Eskibear/vscode-extension-telemetry-wrapper/issues"
  },
  "dependencies": {
    "continuation-local-storage": "^3.2.1",
    "fs-extra": "^5.0.0",
    "uuid": "^3.1.0",
    "vscode-extension-telemetry": "^0.0.18"
  },
  "description": "A module to auto send telemetry for each registered command, using vscode-extension-telemetry.",
  "devDependencies": {
    "@types/continuation-local-storage": "^3.2.1",
    "@types/fs-extra": "^5.0.0",
    "@types/node": "^8.5.7",
    "@types/uuid": "^3.4.3",
    "tslint": "^5.11.0",
    "typescript": "^2.9.2",
    "vscode": "^1.1.21"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-92OsAerFwbMf5XzrkWROuehf8tZ25GdLOC7DpvMVXtDO+arFMM0ciBUW9V7KFf5MKCnS+CaxdUvOAV2Ozhgscw==",
    "shasum": "7eb14b68b2c4beff811636a95bca218c7fdfe18b",
    "tarball": "https://registry.npmjs.org/vscode-extension-telemetry-wrapper/-/vscode-extension-telemetry-wrapper-0.3.1.tgz",
    "fileCount": 37,
    "unpackedSize": 71150,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbmNjFCRA9TVsSAnZWagAAsgYQAIv9qGds90RaDcULqkw2\n84owek50gEz4/GdyhYuGrtDA3zylH3Aj32mc62UwNYNDCraApdPAqHTa8ttH\nCJOhly8buA0V5CAZp4pd3ELokBi2Jw2UiIokQKm550nVyDiN+pGhfRtzeBuo\ndF6hKCfNGVmHE+cr/N3PfdC3v2LVELojss97+aMBuw/AyXBpEncK21tsPsHR\nOT3tCfLZQwUYzi+WqoJ6NPxz+fXCQhAU9han9zpbqJI9zo0HdMIvzf0eaQVN\n2Aosdcjx2JA+6+j/v9fuwv9nl5pB6dxtbcRsJdXP8TW3/J93auqi45CqCWBf\nMD7NfosCCPvEzTIzHWjt6kit41gILHwqY6EfxkUbTJ8Ymoem64KOzyL37ApO\n1S2xo09vzMNUZC3fM0fD6ywTGIjLICCkMTH4v5b9fH8m0RMnDYoOZ6RmgYjl\n/bAoeLbaNgeR5+ZEV6iiloA1Pt52ELvD8BnmLt/w7ZgL4e5qiHWegHO8wT6W\nRxs+o3rsxfHIWksloB9avYyx+4hNvQNituuyWogJ3qwpgj91PzDFgad8jNuj\nzCTVWZ4Zfqw5jCXu2FMWdp9roGMkpIYlKHkvI4g4vRfV+1Nfc3Aw4xvcPCPi\nw7fPy3kKhQGfmDkChFarkJh002QPRyxYZZeYObSqppNGybSxM5s8nxxk7gQU\n/AZF\r\n=/aGZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "vscode": "^1.5.0"
  },
  "gitHead": "9e7882404c59a5daa68e7fdefce07ee5f7ada1e9",
  "homepage": "https://github.com/Eskibear/vscode-extension-telemetry-wrapper#readme",
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "eskibear",
      "email": "zy1992@gmail.com"
    }
  ],
  "name": "vscode-extension-telemetry-wrapper",
  "optionalDependencies": {},
  "readme": "[![npm Package](https://img.shields.io/npm/v/vscode-extension-telemetry-wrapper.svg)](https://www.npmjs.org/package/vscode-extension-telemetry-wrapper)\n[![License](https://img.shields.io/npm/l/express.svg)](https://github.com/eskibear/vscode-extension-telemetry-wrapper/blob/master/LICENSE)\n[![downloads per month](https://img.shields.io/npm/dm/vscode-extension-telemetry-wrapper.svg)](https://www.npmjs.org/package/vscode-extension-telemetry-wrapper)\n\nInject code to send telemetry to Application Insight when register commands.\nIt sends `commandStart` and `commandEnd` for execution of each the command.\n\n## Version map\n|vscode-extension-telemetry-wrapper|vscode-extension-telemetry| \n|---|---|\n|0.3.0 (next)|^0.0.18|\n|0.2.4 (latest)|^0.0.18|\n|~~0.2.3 (Deprecated)~~|~~^0.0.17~~|\n|0.2.2|^0.0.17|\n|0.2.1|0.0.10|\n|0.1.x|0.0.10|\n\n\n## Usage for 0.3.0 (New)\n### Examples\n- Initialize the wrapper on activation.\n    ```ts\n    import { initialize, instrumentOperation } from \"vscode-extension-telemetry-wrapper\";\n    export async function activate(context: vscode.ExtensionContext): Promise<void> {\n        // initialize the wrapper.\n        await initialize(extensionId, extensionVersion, aiKey);\n\n        // It instruments the activate operation to send related events.\n        await instrumentOperation(\"activation\", doActivate)(context);\n    }\n\n    async function doActivate(_operationId: string, context: vscode.ExtensionContext): Promise<void> {\n        // Move your code here.\n    }\n    ```\n\n- Instrument your VS Code command.\n    ```ts\n    const name = \"my.hello\";\n    const myHello = (...args) => {\n        vscode.window.showInformationMessage(\"Hello: \" + args.join(\" \"));\n    };\n    // _operationId contains a unique Id for each execution of `myHello`, in case you want to access it.\n    const instrumented = instrumentOperation(name, (_operationId, myargs) => myHello(myargs));\n    vscode.commands.registerCommand(name, instrumented);\n    ```\n\n- Mark an Error as user error.\n    ```ts\n    try {\n        // ...\n    } catch (err: Error) {\n        setUserError(err);\n        // do something with the user error.\n        throw(err);\n    }\n    ```\n\n- Set error code for an Error.\n    ```ts\n    try {\n        // ...\n    } catch (err: Error) {\n        // The error code should be a non-zero integer. \n        const ERROR_FILE_NOT_FOUND = 2;\n        setErrorCode(err, ERROR_FILE_NOT_FOUND);\n        throw(err);\n    }\n    ```\n\n### Exported APIs\n\n<details><summary>Initialize.</summary>\n\n```typescript\n/**\n * Initialize TelemetryReporter by parsing attributes from a JSON file.\n * It reads these attributes: publisher, name, version, aiKey.\n * @param jsonFilepath absolute path of a JSON file.\n */\nfunction initializeFromJsonFile(jsonFilepath: string, _debug?: boolean): Promise<void>;\n\n/**\n * Initialize TelemetryReporter from given attributes.\n * @param extensionId Identifier of the extension, used as prefix of EventName in telemetry data.\n * @param version Version of the extension.\n * @param aiKey Key of Application Insights.\n */\nfunction initialize(extensionId: string, version: string, aiKey: string, _debug?: boolean): void;\n```\n</details>\n\n<details><summary>Mark on an Error.</summary>\n\n```typescript\n/**\n * Mark an Error instance as a user error.\n */\nfunction setUserError(err: Error): void;\n\n/**\n * Set custom error code or an Error instance.\n * @param errorCode A custom error code.\n */\nfunction setErrorCode(err: Error, errorCode: number): void;\n```\n* Instrument an operation.\n```typescript\n/**\n * Instrument callback for a command to auto send OPEARTION_START, OPERATION_END, ERROR telemetry.\n * @param operationName For extension activation, use \"activation\", for VS Code commands, use command name.\n * @param cb The callback function with a unique Id passed by its 1st parameter.\n * @returns The instrumented callback.\n */\nfunction instrumentOperation(operationName: string, cb: (_operationId: string, ...args: any[]) => any): (...args: any[]) => any;\n```\n</details>\n\n<details><summary>Send events.</summary>\n\n```ts\n/**\n * Send OPERATION_START event.\n * @param operationId Unique id of the operation.\n * @param operationName Name of the operation.\n */\nfunction sendOperationStart(operationId: string, operationName: string): void;\n\n/**\n * Send OPERATION_END event.\n * @param operationId Unique id of the operation.\n * @param operationName Name of the operation.\n * @param duration Time elapsed for the operation, in milliseconds.\n * @param err An optional Error instance if occurs during the operation.\n */\nfunction sendOperationEnd(operationId: string, operationName: string, duration: number, err?: Error): void;\n\n/**\n * Send an ERROR event.\n * @param err An Error instance.\n */\nexport declare function sendError(err: Error): void;\n\n/**\n * Send an ERROR event during an operation, carrying id and name of the oepration.\n * @param operationId Unique id of the operation.\n * @param operationName Name of the operation.\n * @param err An Error instance containing details.\n */\nfunction sendOperationalError(operationId: string, operationName: string, err: Error): void;\n```\n</details>\n\n<details><summary>Create a Unique Id.</summary>\n\n```ts\n/**\n * Create a UUID string using uuid.v4().\n */\nfunction createUuid(): string;\n```\n</details>\n\n## Usage for 0.2.x\n<details>\n<summary>Examples.</summary>\n\n```\nimport { TelemetryWrapper } from \"vscode-extension-telemetry-wrapper\";\n\n// initialize with specific parameters\nTelemetryWrapper.initilize(publisher, extensionName, version, aiKey);\n\n// or directly from Json file, e.g. package.json\nTelemetryWrapper.initilizeFromJsonFile(context.asAbsolutePath(\"./package.json\"));\n```\n\nFor compatibility, the legacy `TelemetryReporter` can be accessed by `TelemetryWrapper.getReporter()`.\n\n\n### Previous without wrapper\n\n```\nexport function activate(context: vscode.ExtensionContext): void {\n\n    vscode.commands.registerCommand(\"commandName\", \n        (args: any[]): void => {\n            // TODO\n        }\n    );\n\n}\n```\n\n### Now\n\n**Basic usage**\n\n```\nexport function activate(context: vscode.ExtensionContext): void {\n\n    TelemetryWrapper.registerCommand(\"commandName\",\n        (args: any[]): void => {\n            // TODO\n        }\n    );\n\n}\n```\n\n**Send custom usage data during the session**\n```\nexport function activate(context: vscode.ExtensionContext): void {\n\n    TelemetryWrapper.registerCommand(\"commandName\",\n        (args: any[]): void => {\n            // TODO: initialize\n            TelemetryWrapper.sendTelemetryEvent(“initializeDone”);\n            // TODO: pre tasks\n            TelemetryWrapper.sendTelemetryEvent(\"preTasksDone\");\n            // TODO: final tasks\n        }\n    );\n\n}\n```\n\nResult:\n\n* publisher.extension/commandStart      {sessionId: xxx}\n* publisher.extension/initilizeDone     {sessionId: xxx}\n* publisher.extension/preTasksDone      {sessionId: xxx}\n* publisher.extension/commandEnd        {sessionId: xxx, exitCode: 0}\n\n\n**Send custom usage data with different log level**\n```\nexport function activate(context: vscode.ExtensionContext): void {\n\n    TelemetryWrapper.registerCommand(\"commandName\",\n        (args: any[]): void => {\n            // TODO: initialize\n            TelemetryWrapper.info(“initializeDone”);\n            // TODO: pre tasks with error\n            TelemetryWrapper.error(\"preTasksNotDone\");\n            // TODO: final tasks\n        }\n    );\n}\n```\nResult:\n\n* publisher.extension/commandStart      {sessionId: xxx}\n* publisher.extension/info              {message: \"initilizeDone\", logLevel: 400, sessionId: xxx}\n* publisher.extension/error             {message: \"preTasksDone\", logLevel: 200, sessionId: xxx}\n* publisher.extension/commandEnd        {sessionId: xxx, exitCode: 1}\n\n\n**Inject customized properties into the a session**\n```\nexport function activate(context: vscode.ExtensionContext): void {\n\n    TelemetryWrapper.registerCommand(\"commandName\",\n        (args: any[]): void => {\n            const t = TelemetryWrapper.currentSession();\n            t.extraProperties.finishedSteps = [];\n            // TODO: initialize\n            t.extraProperties.finishedSteps.push(\"initialize\");\n            // TODO: pre tasks\n            t.extraProperties.finishedSteps.push(\"preTasks\");\n            // TODO: final tasks\n            t.extraProperties.finishedSteps.push(\"finalTasks\");\n        }\n    );\n\n}\n```\n\nResult:\n\n* publisher.extension/commandStart\n    ```\n    {\n        sessionId: xxx\n    }\n    ```\n* publisher.extension/commandEnd\n    ```\n    {\n        sessionId: xxx,\n        exitCode: 0,\n        extra.finishedSteps: [\n            \"initialize\",\n            \"preTasks\",\n            \"finalTasks\"\n        ]\n    }\n    ```\n\n\n</details>\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Eskibear/vscode-extension-telemetry-wrapper.git"
  },
  "scripts": {
    "compile": "tsc -p .",
    "dev-postinstall": "node ./node_modules/vscode/bin/install",
    "test": "echo \"Error: no test specified\" && exit 1",
    "tslint": "tslint -t verbose src/**/*.ts",
    "watch": "tsc -w -p ."
  },
  "types": "./lib/index.d.ts",
  "version": "0.3.1"
}
