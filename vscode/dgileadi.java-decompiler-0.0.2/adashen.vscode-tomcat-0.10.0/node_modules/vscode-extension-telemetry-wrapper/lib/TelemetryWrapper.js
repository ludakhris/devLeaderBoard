"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fse = require("fs-extra");
const vscode = require("vscode");
const vscode_extension_telemetry_1 = require("vscode-extension-telemetry");
const Session_1 = require("./Session");
const ExitCode_1 = require("./ExitCode");
const continuation_local_storage_1 = require("continuation-local-storage");
const LogLevel_1 = require("./LogLevel");
const SESSION_KEY = "session";
var TelemetryWrapper;
(function (TelemetryWrapper) {
    let reporter;
    let sessionNamespace;
    function initilizeFromJsonFile(fsPath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield fse.pathExists(fsPath)) {
                const { publisher, name, version, aiKey } = yield fse.readJSON(fsPath);
                initilize(publisher, name, version, aiKey);
            }
            else {
                throw new Error(`The Json file '${fsPath}' does not exist.`);
            }
        });
    }
    TelemetryWrapper.initilizeFromJsonFile = initilizeFromJsonFile;
    function initilize(publisher, name, version, aiKey) {
        if (reporter) {
            throw new Error("TelemetryReporter already initilized.");
        }
        if (aiKey) {
            reporter = new vscode_extension_telemetry_1.default(`${publisher}.${name}`, version, aiKey);
            report(EventType.ACTIVATION);
        }
        if (!sessionNamespace) {
            sessionNamespace = continuation_local_storage_1.createNamespace("sessionNamespace");
        }
    }
    TelemetryWrapper.initilize = initilize;
    function registerCommand(command, callback) {
        return vscode.commands.registerCommand(command, (param) => __awaiter(this, void 0, void 0, function* () {
            yield new Promise((resolve, reject) => {
                sessionNamespace.run(() => __awaiter(this, void 0, void 0, function* () {
                    const session = startSession(command);
                    sessionNamespace.set(SESSION_KEY, session);
                    report(EventType.COMMAND_START, {
                        properties: Object.assign({}, session.getCustomEvent().properties),
                        measures: { logLevel: LogLevel_1.LogLevel.INFO }
                    });
                    try {
                        yield callback(param);
                        resolve();
                    }
                    catch (error) {
                        fatal(error, ExitCode_1.ExitCode.GENERAL_ERROR);
                        reject(error);
                    }
                    finally {
                        endSession(session);
                    }
                }));
            });
        }));
    }
    TelemetryWrapper.registerCommand = registerCommand;
    function getReporter() {
        return reporter;
    }
    TelemetryWrapper.getReporter = getReporter;
    function startSession(name) {
        const trans = new Session_1.Session(name);
        return trans;
    }
    TelemetryWrapper.startSession = startSession;
    function endSession(session) {
        if (session) {
            session.end();
            const customEvent = session.getCustomEvent();
            report(EventType.COMMAND_END, {
                properties: Object.assign({}, customEvent.properties, { stopAt: session.stopAt, exitCode: session.exitCode }),
                measures: Object.assign({}, customEvent.measures, { logLevel: LogLevel_1.LogLevel.INFO })
            });
        }
    }
    TelemetryWrapper.endSession = endSession;
    function currentSession() {
        return sessionNamespace && sessionNamespace.get(SESSION_KEY);
    }
    TelemetryWrapper.currentSession = currentSession;
    function fatal(message, exitCode) {
        const session = currentSession();
        const customEvent = session ? session.getCustomEvent() : {};
        report(EventType.ERROR, {
            properties: Object.assign({}, customEvent.properties, { message }),
            measures: Object.assign({}, customEvent.measures, { logLevel: LogLevel_1.LogLevel.FATAL })
        });
        if (session) {
            session.exitCode = exitCode || ExitCode_1.ExitCode.GENERAL_ERROR;
        }
    }
    TelemetryWrapper.fatal = fatal;
    function error(message, exitCode) {
        const session = currentSession();
        const customEvent = session ? session.getCustomEvent() : {};
        report(EventType.ERROR, {
            properties: Object.assign({}, customEvent.properties, { message }),
            measures: Object.assign({}, customEvent.measures, { logLevel: LogLevel_1.LogLevel.ERROR })
        });
        if (session) {
            session.exitCode = exitCode || ExitCode_1.ExitCode.GENERAL_ERROR;
        }
    }
    TelemetryWrapper.error = error;
    function info(message) {
        const session = currentSession();
        const customEvent = session ? session.getCustomEvent() : {};
        report(EventType.INFO, {
            properties: Object.assign({}, customEvent.properties, { message }),
            measures: Object.assign({}, customEvent.measures, { logLevel: LogLevel_1.LogLevel.INFO })
        });
    }
    TelemetryWrapper.info = info;
    function warn(message) {
        const session = currentSession();
        const customEvent = session ? session.getCustomEvent() : {};
        report(EventType.WARN, {
            properties: Object.assign({}, customEvent.properties, { message }),
            measures: Object.assign({}, customEvent.measures, { logLevel: LogLevel_1.LogLevel.WARN })
        });
    }
    TelemetryWrapper.warn = warn;
    function verbose(message) {
        const session = currentSession();
        const customEvent = session ? session.getCustomEvent() : {};
        report(EventType.VERBOSE, {
            properties: Object.assign({}, customEvent.properties, { message }),
            measures: Object.assign({}, customEvent.measures, { logLevel: LogLevel_1.LogLevel.VERBOSE })
        });
    }
    TelemetryWrapper.verbose = verbose;
    function sendTelemetryEvent(eventName, properties, measures) {
        const session = currentSession();
        const customEvent = session ? session.getCustomEvent() : {};
        report(eventName, {
            properties: Object.assign({}, properties, customEvent.properties),
            measures: Object.assign({}, measures, customEvent.measures)
        });
    }
    TelemetryWrapper.sendTelemetryEvent = sendTelemetryEvent;
    let EventType;
    (function (EventType) {
        EventType["ACTIVATION"] = "activation";
        EventType["FATAL"] = "fatal";
        EventType["ERROR"] = "error";
        EventType["WARN"] = "warn";
        EventType["INFO"] = "info";
        EventType["VERBOSE"] = "verbose";
        EventType["COMMAND_START"] = "commandStart";
        EventType["COMMAND_END"] = "commandEnd";
    })(EventType = TelemetryWrapper.EventType || (TelemetryWrapper.EventType = {}));
    function report(eventType, event) {
        if (reporter) {
            reporter.sendTelemetryEvent(eventType, event && event.properties, event && event.measures);
        }
    }
})(TelemetryWrapper = exports.TelemetryWrapper || (exports.TelemetryWrapper = {}));
//# sourceMappingURL=TelemetryWrapper.js.map