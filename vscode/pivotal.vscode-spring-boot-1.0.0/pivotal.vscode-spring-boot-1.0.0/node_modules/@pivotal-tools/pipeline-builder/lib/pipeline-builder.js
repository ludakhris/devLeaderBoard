#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsyaml = require("js-yaml");
const fs = require("fs");
const path = require("path");
const shell = require("shelljs");
const TEMPLATES = path.resolve(__dirname, '../templates');
function isExecutable(f) {
    return f.endsWith('.sh');
}
class STE {
    constructor(resolver, templatesPath, outputPath) {
        this.resolver = resolver;
        this.templates = templatesPath;
        this.outputPath = outputPath;
    }
    var_re(templatePath) {
        if (templatePath.endsWith('.yml') || templatePath.endsWith('.yaml')) {
            return /\$\{(\w+)\}/g;
        }
        else if (templatePath.endsWith('.sh')) {
            return /\$\$\{(\w+)\}/g;
        }
        return null;
    }
    isTemplate(filePath) {
        return this.var_re(filePath) !== null;
    }
    process() {
        return __awaiter(this, void 0, void 0, function* () {
            yield fswalk(this.templates, '.', {
                doWithFile: (f, r) => __awaiter(this, void 0, void 0, function* () { return yield this.processFile(f, r); }),
                doWithDir: (f, r) => __awaiter(this, void 0, void 0, function* () { return yield this.processDir(f, r); }),
            });
        });
    }
    processFile(p, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('f: ', p);
            let target = path.resolve(this.outputPath, relativePath);
            let basename = path.basename(target);
            if (basename.startsWith('_')) {
                basename = basename.substring(1);
                target = path.join(path.dirname(target), basename);
            }
            let var_re = this.var_re(p);
            if (var_re) {
                let rendered = yield this.renderTemplate(var_re, fs.readFileSync(p, 'UTF8'));
                fs.writeFileSync(target, rendered);
                if (isExecutable(p)) {
                    fs.chmodSync(target, '755');
                }
            }
            else {
                shell.cp(p, target);
            }
        });
    }
    renderTemplate(re, template) {
        return __awaiter(this, void 0, void 0, function* () {
            let varnames = new Set();
            template.replace(re, (mtch, ...more) => {
                varnames.add(more[0]);
                return mtch;
            });
            let map = new Map();
            let iter = varnames.values();
            let varname = iter.next().value;
            while (varname) {
                map.set(varname, (yield this.resolver(varname)) || '');
                varname = iter.next().value;
            }
            return template.replace(re, (mtch, ...more) => {
                let varname = more[0];
                return map.get(varname) || mtch;
            });
        });
    }
    processDir(p, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('d: ', p);
            shell.mkdir('-p', path.resolve(this.outputPath, relativePath));
        });
    }
}
function fswalk(root, relative_path, handlers) {
    return __awaiter(this, void 0, void 0, function* () {
        let p = path.resolve(root, relative_path);
        const stat = fs.statSync(p);
        if (stat.isDirectory()) {
            yield handlers.doWithDir(p, relative_path);
            let entries = fs.readdirSync(p);
            for (let index = 0; index < entries.length; index++) {
                const name = entries[index];
                let relativeChild = path.join(relative_path, name);
                yield fswalk(root, relativeChild, handlers);
            }
        }
        else if (stat.isFile()) {
            yield handlers.doWithFile(p, relative_path);
        }
    });
}
function readValuesYaml(valuesFile) {
    if (fs.existsSync(valuesFile) && fs.statSync(valuesFile).isFile()) {
        return jsyaml.safeLoad(fs.readFileSync(valuesFile, 'UTF8'));
    }
    return {};
}
function storeValuesYaml(valuesFile, values) {
    fs.writeFileSync(valuesFile, jsyaml.safeDump(values));
}
function interactiveResolver(defaults, question) {
    let alreadyAsked = new Set();
    let cache = new Map();
    function ask(varname) {
        return __awaiter(this, void 0, void 0, function* () {
            let defaultValue = yield defaults(varname);
            if (defaultValue && defaultValue.indexOf('\n') >= 0) {
                return defaultValue;
            }
            let answer = (yield question(varname, defaultValue)) || defaultValue || '';
            cache.set(varname, yield answer);
            return answer;
        });
    }
    let resolve = (varname) => __awaiter(this, void 0, void 0, function* () {
        if (!alreadyAsked.has(varname)) {
            alreadyAsked.add(varname);
            return yield ask(varname);
        }
        return cache.get(varname) || '';
    });
    let cr = resolve;
    cr.cache = cache;
    return cr;
}
function appNameFromGitRepo(repoUri) {
    if (repoUri === undefined) {
        return;
    }
    let x = repoUri;
    if (x.endsWith('.git')) {
        x = x.substring(0, x.length - '.git'.length);
    }
    let slash = x.lastIndexOf('/');
    if (slash >= 0) {
        x = x.substring(slash + 1);
    }
    return x;
}
function usernameFromGitRepo(repoUri) {
    if (repoUri === undefined) {
        return;
    }
    if (repoUri.startsWith('http')) {
        throw new Error('https git repo case not yet implemented');
    }
    let colon = repoUri.indexOf(':');
    let slash = repoUri.indexOf('/', colon);
    if (colon >= 0 && slash >= 0) {
        return repoUri.substring(colon + 1, slash);
    }
    return repoUri;
}
function escapeYaml(str) {
    if (str.indexOf('\n') >= 0) {
        return multilineYamlString(str);
    }
    return str;
}
function or(r1, r2) {
    return (self) => __awaiter(this, void 0, void 0, function* () { return (yield r1(self)) || (yield r2(self)); });
}
class RecursiceResolverBuilder {
    constructor() {
        this.resolvers = new Map();
        this.self = (name) => __awaiter(this, void 0, void 0, function* () { return yield this.resolve(name); });
        this.cache = new Map();
    }
    loadDefaults(yamlValuesFile) {
        if (fs.existsSync(yamlValuesFile)) {
            let obj = readValuesYaml(yamlValuesFile);
            for (let property in obj) {
                if (obj.hasOwnProperty(property)) {
                    this.cache.set(property, escapeYaml(obj[property]));
                }
            }
        }
    }
    build() {
        return this.self;
    }
    add(name, resolveFun) {
        let existing = this.resolvers.get(name);
        if (existing) {
            resolveFun = or(resolveFun, existing);
        }
        this.resolvers.set(name, resolveFun);
    }
    resolve(name, chain) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cache.has(name)) {
                return this.cache.get(name);
            }
            chain = chain || [];
            if (chain.includes(name)) {
                throw new Error(`Cyclic dependency detected: ${name} -> ${chain}`);
            }
            chain = chain.concat([name]);
            let propertyResolver = this.resolvers.get(name);
            let resolved = undefined;
            if (!propertyResolver) {
                resolved = `CHANGEME_${name}`;
            }
            else {
                resolved = yield propertyResolver(this.self);
            }
            console.log(`${name} => '${resolved}'`);
            if (resolved) {
                this.cache.set(name, resolved);
            }
            return resolved;
        });
    }
}
function tagForBranch(branch) {
    if (branch === 'master') {
        return 'latest';
    }
    return branch || 'master';
}
function exec(command) {
    return shell.exec(command, { silent: true }).stdout.toString();
}
function getDockerUser() {
    let dockerInfo = exec('docker info');
    let userPattern = /Username: (.*)/;
    let match = userPattern.exec(dockerInfo);
    return (match && match[1].trim()) || 'docker_user';
}
function multilineYamlString(str) {
    return '|\n  ' + str.replace(/\n/gm, '\n  ').trim();
}
function generate_pipeline(projectRoot, questioner) {
    return __awaiter(this, void 0, void 0, function* () {
        let defaults = new RecursiceResolverBuilder();
        defaults.loadDefaults('ci/secrets.yml');
        defaults.add('git_repo_uri', (resolve) => __awaiter(this, void 0, void 0, function* () { return exec('git config --get remote.origin.url').trim(); }));
        defaults.add('https_git_repo_uri', (resolve) => __awaiter(this, void 0, void 0, function* () {
            let uri = yield resolve('git_repo_uri');
            if (uri && uri.startsWith('git@')) {
                return 'https://' + uri.substring('git@'.length).replace(':', '/');
            }
            return uri;
        }));
        defaults.add('git_branch', (resolve) => __awaiter(this, void 0, void 0, function* () { return exec('git rev-parse --abbrev-ref HEAD').trim() || 'master'; }));
        defaults.add('app_name', (resolve) => __awaiter(this, void 0, void 0, function* () { return appNameFromGitRepo(yield resolve('git_repo_uri')); }));
        defaults.add('docker_tag', (resolve) => __awaiter(this, void 0, void 0, function* () { return tagForBranch(yield resolve('git_branch')); }));
        defaults.add('docker_repo', (resolve) => __awaiter(this, void 0, void 0, function* () {
            let user = yield resolve('docker_user');
            return `${yield resolve('docker_user')}/${yield resolve('app_name')}`;
        }));
        defaults.add('docker_image', (resolve) => __awaiter(this, void 0, void 0, function* () { return `${yield resolve('docker_repo')}:${yield resolve('docker_tag')}`; }));
        defaults.add('docker_user', (resolve) => __awaiter(this, void 0, void 0, function* () { return getDockerUser(); }));
        defaults.add('git_user', (resolve) => __awaiter(this, void 0, void 0, function* () { return usernameFromGitRepo(yield resolve('git_repo_uri')); }));
        defaults.add('helm_release_name', (resolve) => __awaiter(this, void 0, void 0, function* () { return (yield resolve('app_name')) + '-' + (yield resolve('git_branch')); }));
        defaults.add('pipeline_name', (resolve) => __awaiter(this, void 0, void 0, function* () { return (yield resolve('app_name')) + '-' + (yield resolve('git_branch')); }));
        defaults.add('kube_config', (resolve) => __awaiter(this, void 0, void 0, function* () {
            let home = process.env.HOME;
            if (home) {
                let kube_config_file = path.resolve(home, '.kube', 'config');
                if (fs.existsSync(kube_config_file)) {
                    return multilineYamlString(shell.cat(kube_config_file).toString());
                }
            }
            return 'INSERT_FULL_CONTENTS_OF_KUBE_CONFIG_FILE';
        }));
        let resolver = interactiveResolver(defaults.build(), questioner);
        shell.cd(projectRoot);
        let te = new STE(resolver, TEMPLATES, projectRoot);
        yield te.process();
        console.log(`=========================`);
        resolver.cache.forEach((v, k) => {
            console.log(`${k} = '${v}'`);
        });
        console.log(`=========================`);
    });
}
exports.generate_pipeline = generate_pipeline;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUtYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9waXBlbGluZS1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0Esa0NBQWtDO0FBRWxDLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBR2pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBVTFELHNCQUFzQixDQUFVO0lBRTlCLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQ7SUFLRSxZQUFZLFFBQWtCLEVBQUUsYUFBcUIsRUFBRSxVQUFrQjtRQUN2RSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQW9CO1FBQ3pCLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25FLE9BQU8sY0FBYyxDQUFDO1NBQ3ZCO2FBQU0sSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZDLE9BQU8sZ0JBQWdCLENBQUM7U0FDekI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksQ0FBQztJQUN4QyxDQUFDO0lBRUssT0FBTzs7WUFDWCxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtnQkFDaEMsVUFBVSxFQUFFLENBQU8sQ0FBQyxFQUFF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